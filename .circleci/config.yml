version: 2
jobs:
  build:
    docker:
      # using custom image, see .circleci/images/primary/Dockerfile
      - image: python:latest
#        environment:
#          POSTGRES_USER: ubuntu
#          POSTGRES_DB: contacts
#    working_directory: /go/src/github.com/fsdevio/alted

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout
#
#      - run:
#          name: Waiting for Postgres to be ready
#          command: |
#            for i in `seq 1 10`;
#            do
#              nc -z localhost 5432 && echo Success && exit 0
#              echo -n .
#              sleep 1
#            done
#            echo Failed waiting for Postgress && exit 1
#
#      - run: mkdir -p $TEST_RESULTS
#
#      - run:
#          name: Run unit tests
#          environment:
#            DATABASE_URL: "postgres://ubuntu@localhost:5432/contacts?sslmode=disable"
#            DB_MIGRATIONS: /go/src/github.com/circleci/cci-demo-docker/db/migrations
#          command: |
#            set -ou pipefail
#            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
#            # Notice this `set -o pipefail`, this will cause script to fail if `make test` fails
#            # without this option script will return success regardless of testing result due to pipe after test command
#            make test | tee ${TEST_RESULTS}/go-test.out

      - setup_remote_docker

      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker client
          command: |
            mkdir /etc/docker
            echo  '{"insecure-registries" : [ "vt2.fsdev.io" ]}' > /etc/docker/daemon.json
            sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
            apt update
            apt install docker-ce

#            set -x
#            VER="18.03.1-ce"
#            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
#            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
#            mv /tmp/docker/* /usr/bin

      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

      - run:
          name: Generate version number
          command: python utils/generate_version.py

      - run:
          name: Start container and verify it's working
          command: |
            export version=test
            set -x
            docker-compose -f production.yml up -d

            # docker-compose will start 2 containers, the one with service will be named `contacts`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container
#            docker run --network container:contacts \
#              appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test

      - run:
          name: Install node.js and npm
          command: |
            curl -sL https://deb.nodesource.com/setup_8.x | bash -
            apt install -y nodejs

      - run:
          name: Build static files
          command: |
            npm install
            ./node_modules/.bin/webpack -p

      - run:
          name: Upload built static files
          command: |
            python utils/upload_static_files.py

      - deploy:
          name: Build and push Docker image
          command: |
            set -o allexport && source .env

            echo $DOCKER_PASSWORD | docker login -u $DOCKER_LOGIN --password-stdin vt2.fsdev.io
            docker push vt2.fsdev.io/alted/django:$VERSION
            docker push vt2.fsdev.io/alted/postgres:$VERSION
            docker push vt2.fsdev.io/alted/celeryworker:$VERSION
            docker push vt2.fsdev.io/alted/celerybeat:$VERSION

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results
